stages:
  - pages  
  - build 
  - static_analysis
  - test


variables:
  GIT_DEPTH: 1

cache:
  key: "${CI_PROJECT_NAME}"
  paths:
    - /cache

visual_report:
  stage: test
  image: alpine:latest
  rules:
    #- if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "never_trigger_this"'
  script:
    # 必要なパッケージのインストール（bashやcoreutilsなど）
    - apk add --no-cache bash
    # レポート用ディレクトリの作成
    - mkdir -p report
    # サンプルのHTMLレポートを作成
    - |
      cat > report/index.html <<'EOF'
      <!DOCTYPE html>
      <html lang="ja">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Visual Regression Test Report</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; }
          h1 { color: #333; }
          table { border-collapse: collapse; width: 100%; }
          th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }
          th { background-color: #f4f4f4; }
        </style>
      </head>
      <body>
        <h1>Visual Regression Test Report</h1>
        <p>このレポートは、Visual Regression Testingの結果を示しています。</p>
        <table>
          <thead>
            <tr>
              <th>Test Case</th>
              <th>Status</th>
              <th>Details</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>Home Page</td>
              <td>Passed</td>
              <td>No visual differences detected.</td>
            </tr>
            <tr>
              <td>About Page</td>
              <td>Failed</td>
              <td>
                <a href="diffs/about_diff.png" target="_blank">差分画像を見る</a>
              </td>
            </tr>
          </tbody>
        </table>
      </body>
      </html>
      EOF
  artifacts:
    when: always
    paths:
      - report
    expire_in: 1 week

build:
  stage: pages
  image:
    name: python:3.9
    #pull_policy: if-not-present
    pull_policy: if-not-present
  rules:
    #- if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
    - if: '$CI_PIPELINE_SOURCE == "never_trigger_this"'
  script:
    - |
      if [ ! -d "/cache/pmd-bin-7.10.0" ]; then
        echo "PMD ディレクトリが存在しません。ダウンロードを開始します。"
        mkdir -p /cache
        pushd /cache
        wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F7.10.0/pmd-dist-7.10.0-bin.zip
        unzip pmd-dist-7.10.0-bin.zip
        export PMD_PATH=/cache/pmd-bin-7.10.0/bin/pmd
        popd
      fi
    - |
      if [ ! -d "/cache/apache-maven-3.9.9" ]; then
        echo "maven ディレクトリが存在しません。ダウンロードを開始します。"
        mkdir -p /cache
        pushd /cache
        wget https://dlcdn.apache.org/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.zip
        unzip apache-maven-3.9.9-bin.zip
        popd
      fi
    # JDKが存在しなければダウンロードする
    - |
      if [ ! -d "/cache/jdk-17.0.14+7" ]; then
        echo "Microsoft JDK が存在しません。ダウンロードして展開します。"
        mkdir -p /cache
        pushd /cache
        wget -O microsoft-jdk-17.0.14-linux-x64.tar.gz "https://aka.ms/download-jdk/microsoft-jdk-17.0.14-linux-x64.tar.gz"
        tar -xzf microsoft-jdk-17.0.14-linux-x64.tar.gz
        popd
      fi
    # JAVA_HOME と PATH の設定
    - export JAVA_HOME=/cache/jdk-17.0.14+7
    - export PATH=$JAVA_HOME/bin:$PATH
    - echo "JAVA_HOME $JAVA_HOME"
    - java -version
    - export PATH=/cache/apache-maven-3.9.9/bin:$PATH
    - mvn -v
    - cd ci-tools
    - if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - ls -l config
    - python -m entrypoints.build_main
  artifacts:
    paths:
      - static_analysis_report.json

pages:
  stage: build
  image: openjdk:17-slim
  services:
    - name: postgres:14
      alias: postgres
  variables:
    POSTGRES_USER: user
    POSTGRES_PASSWORD: password
    POSTGRES_DB: testdb
    SCHEMASPY_HOST: postgres
  before_script:
    - apt-get update && apt-get install -y wget postgresql-client graphviz 
    #libfreetype6 fonts-dejavu-core
    - export PGPASSWORD=$POSTGRES_PASSWORD
    - echo "Downloading SchemaSpy jar..."
    # jarはmavenから取得したものをビルドする
    - wget -O schemaspy.jar https://github.com/schemaspy/schemaspy/releases/download/v6.2.4/schemaspy-6.2.4.jar
    - echo "Downloading PostgreSQL JDBC driver..."
    - wget -O postgresql.jar https://jdbc.postgresql.org/download/postgresql-42.7.2.jar
    - echo "Waiting for PostgreSQL to start..."
    - until pg_isready -h postgres -U $POSTGRES_USER; do sleep 2; done
    - echo "Creating table and inserting sample data..."
    - |
      psql -h postgres -U $POSTGRES_USER -d $POSTGRES_DB <<'EOF'
      CREATE TABLE IF NOT EXISTS users (
          id SERIAL PRIMARY KEY,
          name VARCHAR(100),
          email VARCHAR(100) UNIQUE,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
      INSERT INTO users (name, email) VALUES ('Alice', 'alice@example.com'), ('Bob', 'bob@example.com');
      EOF
  script:
    - echo "Running SchemaSpy to generate ER diagram..."
    - java -jar schemaspy.jar -t pgsql -host $SCHEMASPY_HOST -port 5432 -db $POSTGRES_DB -u $POSTGRES_USER -p $POSTGRES_PASSWORD -o output -dp $(pwd)/postgresql.jar -s public
    - mkdir -p public
    - cp -pr output/* public/
  artifacts:
    paths:
      - public/


#pages2:
#  stage: generate 
#  image:
#    name: node:latest
#    pull_policy: if-not-present
#  script:
#    - cd ./vue/my-vue-app
#    - npm install
#    - npm run build
#    - mkdir -p $CI_PROJECT_DIR/public  # GitLab Pages 用の public ディレクトリを作成
#    - cp -r dist/* $CI_PROJECT_DIR/public/  # ビルドしたファイルを public にコピー
#  artifacts:
#    paths:
#      - public  # ルートディレクトリの public を GitLab Pages にアップロード
#  rules:
#    # This ensures that only pushes to the default branch will trigger
#    # a pages deploy
#    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH

#keyworkd_check
#  stage: test
#  script:
#  - echo "START TEST"


static_analysis_pmd:
  stage: static_analysis
  image:
    name: python:3.9
    #pull_policy: if-not-present
    pull_policy: if-not-present
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
  script:
    - pwd
    - export EXECUTE_PATH=$(pwd)
    # PMDのバイナリがキャッシュに存在しなければダウンロードする
    - |
      if [ ! -d "/cache/pmd-bin-7.10.0" ]; then
        echo "PMD ディレクトリが存在しません。ダウンロードを開始します。"
        mkdir -p /cache
        pushd /cache
        wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F7.10.0/pmd-dist-7.10.0-bin.zip
        unzip pmd-dist-7.10.0-bin.zip
        export PMD_PATH=/cache/pmd-bin-7.10.0/bin/pmd
        popd
      fi
    # JDKが存在しなければダウンロードする
    - |
      if [ ! -d "/cache/jdk-17.0.14+7" ]; then
        echo "Microsoft JDK が存在しません。ダウンロードして展開します。"
        mkdir -p /cache
        pushd /cache
        wget -O microsoft-jdk-17.0.14-linux-x64.tar.gz "https://aka.ms/download-jdk/microsoft-jdk-17.0.14-linux-x64.tar.gz"
        tar -xzf microsoft-jdk-17.0.14-linux-x64.tar.gz
        popd
      fi
    # JAVA_HOME と PATH の設定
    - export JAVA_HOME=/cache/jdk-17.0.14+7
    - export PATH=$JAVA_HOME/bin:$PATH
    - echo "JAVA_HOME $JAVA_HOME"
    - java -version

    - cd ci-tools
    - if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - python -m entrypoints.static_analysis_main --analyzer pmd
    - cp report.json ../static_analysis_report.json
  artifacts:
    paths:
      - static_analysis_report.json

static_analysis_eslint_prettier:
  stage: static_analysis
  image:
    name: cimg/python:3.9-node
    pull_policy: if-not-present
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  script:
    - pwd
    - export EXECUTE_PATH=$(pwd)
    - cd vue/my-vue-app
    - yarn install
    - cd -
    - cd ci-tools
    - pip install -r requirements.txt || true
    - python -m entrypoints.static_analysis_main --analyzer eslint
    - echo "START PRETTIER"
    - python -m entrypoints.static_analysis_main --analyzer prettier


#test_job:
#  stage: test
#  script:
#  - echo "START TEST"

#semgrep-sast:
#  dependencies:
#    - build_job
#  artifacts:
#    reports:
#      sast: gl-sast-report.json
#    paths:
#      - gl-sast-report.json

#dependency-check:
#  stage: dependency-check
#  script:
#    - cd LambdaSample
#    - mvn org.owasp:dependency-check-maven:check
#  artifacts:
#    paths:
#      - target/dependency-check-report.html
#      - target/dependency-check-report.json
#    expire_in: 1 week
# allow_failure: true
